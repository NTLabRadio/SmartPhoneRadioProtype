/********************************************************************************
  * @file    trellisCoder.h
  * @brief   Файл, содержащий объявление объектов и функций, реализующих алгоритмы
  *					помехоустойчивого	кодирования и декодирования треллис(сверточного)-кода.
	*  				Треллис-код имеет структуру, точно совпадающую со структурой кода 
	*					стандарта APCO25,Phase1, который применяется для помехозащиты 
	*					негарантированных данных. эффективность кода - 1/2. Реализация также 
	*					включает в себя алгоритм перемежения данных. Алгоритм декодирования - 
	*					на базе алгоритма Витерби с жесткими решениями.
	*					Данный метод кодирования оптимален для совместного применения с 
	*					4-позиционной манипуляцией (перемежение выполняется для дибитов, ошибка
	*					2 смежных битов может привести к невозможности восстановления данных) и 
	*					для относительно небольших размеров пакетов данных
	*					Описание алгоритма кодирования см. в стандарте TIA-102.BAAA-A
	*
	*******************************************************************************
  *
  * COPYRIGHT(c) 2016 NTLab
  *
	*******************************************************************************/


#ifndef TRELLISCODER_H
#define TRELLISCODER_H


#include <limits.h>
#include <string.h>

#ifdef STM32F071xB
#include "stm32f0xx_hal.h"
#endif
	 
#ifdef STM32F103xE	 
#include "stm32f1xx_hal.h"
#endif

//Размер кадра данных до кодирования, бит
#define SIZE_OF_UNCODED_FRAME	(96)
//Размер кадра данных после кодирования, бит
#define SIZE_OF_CODED_FRAME		(196)

//Размер состояния FSM (автомата конечного состояния) кодера, бит
#define SIZE_OF_TRELLIS_STATE	(4)
//Размер выходного созвездия
#define SIZE_OF_TRELLIS_OUTPUT_CONSTELLATION 		(SIZE_OF_TRELLIS_STATE*SIZE_OF_TRELLIS_STATE)

void trellisEnc1_2(const int8_t * const pDataIn, int8_t * const pDataOut);
int16_t trellisDec1_2(const int8_t * const pDataIn, int8_t * const pDataOut);

void TestTrellisCoder();

#endif // TRELLISCODER_H
